Desafio Proposto - Cada dupla deverá criar um jogo original que explore no mínimo cinco dos recursos técnicos listados.
Recursos Técnicos (Escolher ao menos 5) 1. Loop de Animação: Implementação contínua com requestAnimationFrame. 2. Eventos de Teclado: Controle de movimento e/ou ações do personagem. 3. Paralaxe: Criação de profundidade com múltiplas camadas de fundo. 4. Detecção de Colisão: AABB (Axis-Aligned Bounding Box) ou pixel-aligned simples. 5. Spritesheet: Animação por quadros de personagem ou inimigos. 6. Clipping / Corte: Renderização de sub-regiões específicas do spritesheet. 7. Disparo / Projéteis: Criação, atualização e remoção dinâmica de balas ou objetos.
Temas Disponíveis (Escolher 1) 1) Runner na selva 2) Nave no espaço 3) Cavaleiro e slimes 4) Skate urbano 5) Labirinto neon 6) Pesca pixel art 7) Tower defense simples 8) Metroidvania-lite 9) Plataforma educacional (coletar letras) 10) Zumbi survival 11) Asteroides 12) Gatos ninjas 13) Cozinheiro contra pragas 14) Robô na fábrica 15) Arqueiro no bosque 16) Submarino e minas 17) Voador steampunk 18) Parkour futurista 19) Corrida top-down 20) Quebra-blocos 21) Exploração lunar 22) Bruxa e poções 23) Cowboy duelos 24) Abelha polinizadora 25) Reciclagem (educativo)
Prompts-Modelo para Auxílio 1. Ideação da Mecânica: Sugira 3 ideias de jogo no tema escolhido, com mecânicas centrais, entidades, estados do jogo, eventos de teclado, uso de paralaxe, colisão, spritesheet/clipping e disparo. Inclua lista de tarefas priorizadas (MVP ? Polimento). 2. Geração do Esqueleto (HTML, CSS, JS): index.html simples; style.css básico; main.js contendo loop de animação, funções update() e draw(), controle de teclado, cenário com 2-3 camadas de paralaxe, estrutura de entidades e sistema de colisão AABB. 3. Spritesheet e Clipping: Implementar animação do player usando drawImage() com clipping e controle de taxa de quadros. 4. Disparo e Projéteis: Array de balas, criação ao pressionar tecla, velocidade e direção, remoção ao sair da tela, colisão bala vs inimigo, atualização de pontuação. 5. Depuração e Otimização: Separar update() e draw(), evitar criação de objetos no loop, culling de entidades off-screen, organizar input, física e renderização. 6. Polimento Visual: Paralaxe mais profunda, camadas com offsets diferentes, motion blur falso, tipografia do HUD, feedback de colisão.
Tema Escolhido - Nave no espaço
Base do Código - Colisor() ? sistema de colisão AABB. - Bola() ? exemplo de sprite móvel com colisão. - Fundo() ? fundo com paralaxe vertical.
Descrição do Jogo Desejado - Jogador controla uma nave com movimentação livre. - Parallax vertical aplicado ao fundo. - Inimigos descem de cima para baixo. - Jogo é infinito, velocidade aumenta com o tempo. - Tiros inimigos e colisão com inimigos causam morte instantânea. - Objetivo: percorrer a maior distância possível. - Antes de jogar, usuário deve inserir seu nome para o ranking. - Ao morrer, jogo registra a distância percorrida e atualiza o ranking.
